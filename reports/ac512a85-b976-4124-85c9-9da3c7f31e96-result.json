{"name": "test_2_lote_prestacion", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchFrameException: Message: no such frame\n  (Session info: chrome=118.0.5993.120)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6DEFF8EF2+54786]\n\t(No symbol) [0x00007FF6DEF65612]\n\t(No symbol) [0x00007FF6DEE1A4FD]\n\t(No symbol) [0x00007FF6DEE21ED6]\n\t(No symbol) [0x00007FF6DEE9661F]\n\t(No symbol) [0x00007FF6DEE7BE6A]\n\t(No symbol) [0x00007FF6DEE94D02]\n\t(No symbol) [0x00007FF6DEE7BC43]\n\t(No symbol) [0x00007FF6DEE50941]\n\t(No symbol) [0x00007FF6DEE51B84]\n\tGetHandleVerifier [0x00007FF6DF347F52+3524194]\n\tGetHandleVerifier [0x00007FF6DF39D800+3874576]\n\tGetHandleVerifier [0x00007FF6DF395D7F+3843215]\n\tGetHandleVerifier [0x00007FF6DF095086+694166]\n\t(No symbol) [0x00007FF6DEF70A88]\n\t(No symbol) [0x00007FF6DEF6CA94]\n\t(No symbol) [0x00007FF6DEF6CBC2]\n\t(No symbol) [0x00007FF6DEF5CC83]\n\tBaseThreadInitThunk [0x00007FFA05A0257D+29]\n\tRtlUserThreadStart [0x00007FFA071AAA78+40]", "trace": "self = <tests.test_liquidaciones.TestLiquidaciones object at 0x0000015845222F10>\n\n    def test_2_lote_prestacion(self):\n        driver = self.driver\n        liquidaciones = Liquidaciones(driver)\n>       liquidaciones.altaLotePrestacion()\n\ntest_liquidaciones.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\src\\clases\\Liquidaciones.py:20: in altaLotePrestacion\n    self.driver.switch_to.frame(1)\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:95: in frame\n    self._driver.execute(Command.SWITCH_TO_FRAME, {\"id\": frame_reference})\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000015845A8B990>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such frame\",\"message\":\"no such frame\\\\n  (Session info: chrome=118.0.5...07FF6DEF5CC83]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA05A0257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFA071AAA78+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchFrameException: Message: no such frame\nE         (Session info: chrome=118.0.5993.120)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6DEFF8EF2+54786]\nE       \t(No symbol) [0x00007FF6DEF65612]\nE       \t(No symbol) [0x00007FF6DEE1A4FD]\nE       \t(No symbol) [0x00007FF6DEE21ED6]\nE       \t(No symbol) [0x00007FF6DEE9661F]\nE       \t(No symbol) [0x00007FF6DEE7BE6A]\nE       \t(No symbol) [0x00007FF6DEE94D02]\nE       \t(No symbol) [0x00007FF6DEE7BC43]\nE       \t(No symbol) [0x00007FF6DEE50941]\nE       \t(No symbol) [0x00007FF6DEE51B84]\nE       \tGetHandleVerifier [0x00007FF6DF347F52+3524194]\nE       \tGetHandleVerifier [0x00007FF6DF39D800+3874576]\nE       \tGetHandleVerifier [0x00007FF6DF395D7F+3843215]\nE       \tGetHandleVerifier [0x00007FF6DF095086+694166]\nE       \t(No symbol) [0x00007FF6DEF70A88]\nE       \t(No symbol) [0x00007FF6DEF6CA94]\nE       \t(No symbol) [0x00007FF6DEF6CBC2]\nE       \t(No symbol) [0x00007FF6DEF5CC83]\nE       \tBaseThreadInitThunk [0x00007FFA05A0257D+29]\nE       \tRtlUserThreadStart [0x00007FFA071AAA78+40]\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchFrameException"}, "attachments": [{"name": "stdout", "source": "8412cfda-5675-4243-8121-93c742b95c74-attachment.txt", "type": "text/plain"}], "start": 1699306589004, "stop": 1699306589021, "uuid": "f611d25c-ac85-41cc-b9c3-fc1a83199fb9", "historyId": "badbd731520db94933aa5983cbe65773", "testCaseId": "badbd731520db94933aa5983cbe65773", "fullName": "test_liquidaciones.TestLiquidaciones#test_2_lote_prestacion", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('test_setup')"}, {"name": "suite", "value": "test_liquidaciones"}, {"name": "subSuite", "value": "TestLiquidaciones"}, {"name": "host", "value": "LAR-PF3K6GME"}, {"name": "thread", "value": "15976-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_liquidaciones"}]}